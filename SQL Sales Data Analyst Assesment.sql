--I was asked to do an assesment for a Sales Data Analyst Role and decided to add it to my Portflio--

-- Create the Customers table

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    sales_region VARCHAR(255),
    sign_up_date DATE
);


-- Create the Products table

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category VARCHAR(255),
    price DECIMAL(18, 2)
);


-- Create the Sales table

CREATE TABLE Sales (
    sales_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    sale_date DATE,
    quantity INT,
    total_amount DECIMAL(18, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);




--Write a query to return the customer_name, product_name, and total_amount for each sale in the last 30 days.

SELECT 
    c.customer_name,
    p.product_name,
    s.total_amount
FROM 
    Sales s
JOIN 
    Customers c ON s.customer_id = c.customer_id
JOIN 
    Products p ON s.product_id = p.product_id
WHERE 
    s.sale_date >= DATEADD(DAY, -30, GETDATE());


--Write a query to find the total revenue generated by each product category in the last year. 

SELECT 
    p.category AS product_category,
    SUM(s.total_amount) AS total_revenue
FROM 
    Sales s
JOIN 
    Products p ON s.product_id = p.product_id
WHERE 
    s.sale_date >= DATEADD(YEAR, -1, GETDATE())
GROUP BY 
    p.category;


--Write a query to return all customers who made purchases in 2023 and are located in the "West" region.

SELECT DISTINCT
    c.customer_id,
    c.customer_name
FROM 
    Sales s
JOIN 
    Customers c ON s.customer_id = c.customer_id
WHERE 
    c.sales_region = 'West'
    AND YEAR(s.sale_date) = 2023;


--Write a query to display the total number of sales, total quantity sold, and total revenue for each customer. The result should include the customer_name, total sales, total quantity, and total revenue.

SELECT 
    c.customer_name,
    COUNT(s.sales_id) AS total_sales,
    SUM(s.quantity) AS total_quantity,
    SUM(s.total_amount) AS total_revenue
FROM 
    Sales s
JOIN 
    Customers c ON s.customer_id = c.customer_id
GROUP BY 
    c.customer_name;


--Write a query to find the top 3 customers (by total revenue) in the year 2023.

WITH CustomerRevenue AS (
    SELECT top 3
        c.customer_name,
        SUM(s.total_amount) AS total_revenue
    FROM 
        Sales s
    JOIN 
        Customers c ON s.customer_id = c.customer_id
    WHERE 
        YEAR(s.sale_date) = 2023
    GROUP BY 
        c.customer_name
)
SELECT 
    customer_name,
    total_revenue
FROM 
    CustomerRevenue
ORDER BY 
    total_revenue DESC

	
--Write a query to rank products by their total sales quantity in 2023. The result should include the product_name, total quantity sold, and rank.

WITH ProductSales AS (
    SELECT 
        p.product_name,
        SUM(s.quantity) AS total_quantity
    FROM 
        Sales s
    JOIN 
        Products p ON s.product_id = p.product_id
    WHERE 
        YEAR(s.sale_date) = 2023
    GROUP BY 
        p.product_name
)
SELECT 
    product_name,
    total_quantity,
    RANK() OVER (ORDER BY total_quantity DESC) AS rank
FROM 
    ProductSales;


--Write a query that categorizes customers into "New" (if they signed up in the last 6 months) or "Existing" based on their sign_up_date. Include the customer_name, region, and category in the result.

SELECT 
    customer_name,
    sales_region AS region,
    CASE 
        WHEN sign_up_date >= DATEADD(MONTH, -6, GETDATE()) THEN 'New'
        ELSE 'Existing'
    END AS category
FROM 
    Customers;


--Write a query to return the month and year along with the total sales for each month for the last 12 months.

WITH MonthlySales AS (
    SELECT 
        YEAR(s.sale_date) AS year,
        MONTH(s.sale_date) AS month,
        SUM(s.total_amount) AS total_sales
    FROM 
        Sales s
    WHERE 
        s.sale_date >= DATEADD(MONTH, -12, GETDATE())
    GROUP BY 
        YEAR(s.sale_date),
        MONTH(s.sale_date)
)
SELECT 
    year,
    month,
    total_sales
FROM 
    MonthlySales
ORDER BY 
    year DESC,
    month DESC;


--Write a query to return the product categories that generated more than $50,000 in revenue during the last 6 months.

WITH CategoryRevenue AS (
    SELECT 
        p.category AS product_category,
        SUM(s.total_amount) AS total_revenue
    FROM 
        Sales s
    JOIN 
        Products p ON s.product_id = p.product_id
    WHERE 
        s.sale_date >= DATEADD(MONTH, -6, GETDATE())
    GROUP BY 
        p.category
)
SELECT 
    product_category,
    total_revenue
FROM 
    CategoryRevenue
WHERE 
    total_revenue > 50000;


--Write a query to check for any sales where the total_amount doesn’t match the expected value 

SELECT 
    s.sales_id,
    s.customer_id,
    s.product_id,
    s.sale_date,
    s.quantity,
    s.total_amount AS reported_total_amount,
    (s.quantity * p.price) AS expected_total_amount,
    CASE
        WHEN s.total_amount <> (s.quantity * p.price) THEN 'Mismatch'
        ELSE 'Match'
    END AS amount_status
FROM 
    Sales s
JOIN 
    Products p ON s.product_id = p.product_id
WHERE 
    s.total_amount <> (s.quantity * p.price);